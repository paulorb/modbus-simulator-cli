{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview Why another Modbus Simulator? Most of the options available are non-GPL, with limited customization options and focused on Windows. The idea is to develop an open-source solution available across all platforms/OS. Features High performance TCP Server 100% Kotlin code - JVM (Multiplatform) Ability to associate memory registers with symbols (variable names) Ability to create custom simulation which can during runtime set, clear variables, execute math operations over registers, deal with specific timing requirements Available as CLI tool or as docker image","title":"Overview"},{"location":"#overview","text":"","title":"Overview"},{"location":"#why-another-modbus-simulator","text":"Most of the options available are non-GPL, with limited customization options and focused on Windows. The idea is to develop an open-source solution available across all platforms/OS.","title":"Why another Modbus Simulator?"},{"location":"#features","text":"High performance TCP Server 100% Kotlin code - JVM (Multiplatform) Ability to associate memory registers with symbols (variable names) Ability to create custom simulation which can during runtime set, clear variables, execute math operations over registers, deal with specific timing requirements Available as CLI tool or as docker image","title":"Features"},{"location":"getting-started/input-parameters/","text":"Input parameters Simulator supports input parameters, these parameters are defined on the xml file with optional default values which can be customized by command line arguments. How to configure the parameters? Adding parameters section to the XML Define the parameters and its optional default value (in case the default value is not specified this parameter becomes mandatory) <?xml version=\"1.0\" encoding=\"US-ASCII\" ?> <device ip=\"0.0.0.0\" port=\"502\"> <parameters> <parameter symbol=\"PARAM_CURRENT_SELECTION\" datatype=\"INT16\">15</parameter> <parameter symbol=\"PARAM_SET_TEMPERATURE\" datatype=\"FLOAT32\">5.45</parameter> <parameter symbol=\"PARAM_ENABLE_FAST_MODE\" datatype=\"BOOL\">1</parameter> </parameters> <configuration initializeUndefinedRegisters=\"true\" initialValue=\"0\"> ... </configuration> <simulation plcScanTime=\"1000\"> ... </simulation> </device> These parameters can be used like any other register on the simulation, but as read-only variables . How to change the parameters dynamically? Specified parameters can be overwritten by command line arguments, by specifying the argument -e -env. Example: docker run -it -v $PWD/:/simulation -p5002:5002 paulorb/modbus-simulator-cli -f /simulation/configuration-simulation.xml -e PARAM_CURRENT_SELECTION=10 -e PARAM_SET_TEMPERATURE=0.5 Please note the value specified as argument needs to match the parameter's datatype specified on the xml.","title":"Input parameters"},{"location":"getting-started/input-parameters/#input-parameters","text":"Simulator supports input parameters, these parameters are defined on the xml file with optional default values which can be customized by command line arguments.","title":"Input parameters"},{"location":"getting-started/input-parameters/#how-to-configure-the-parameters","text":"Adding parameters section to the XML Define the parameters and its optional default value (in case the default value is not specified this parameter becomes mandatory) <?xml version=\"1.0\" encoding=\"US-ASCII\" ?> <device ip=\"0.0.0.0\" port=\"502\"> <parameters> <parameter symbol=\"PARAM_CURRENT_SELECTION\" datatype=\"INT16\">15</parameter> <parameter symbol=\"PARAM_SET_TEMPERATURE\" datatype=\"FLOAT32\">5.45</parameter> <parameter symbol=\"PARAM_ENABLE_FAST_MODE\" datatype=\"BOOL\">1</parameter> </parameters> <configuration initializeUndefinedRegisters=\"true\" initialValue=\"0\"> ... </configuration> <simulation plcScanTime=\"1000\"> ... </simulation> </device> These parameters can be used like any other register on the simulation, but as read-only variables .","title":"How to configure the parameters?"},{"location":"getting-started/input-parameters/#how-to-change-the-parameters-dynamically","text":"Specified parameters can be overwritten by command line arguments, by specifying the argument -e -env. Example: docker run -it -v $PWD/:/simulation -p5002:5002 paulorb/modbus-simulator-cli -f /simulation/configuration-simulation.xml -e PARAM_CURRENT_SELECTION=10 -e PARAM_SET_TEMPERATURE=0.5 Please note the value specified as argument needs to match the parameter's datatype specified on the xml.","title":"How to change the parameters dynamically?"},{"location":"getting-started/operations/","text":"Operations This sections covers the different types of operations the simulator can perform when configured in advanced (custom) simulation. Set Set (as the name implies) set a certain value to a variable, like the example below: <set symbol=\"MOTOR_SPEED1\">100.5</set> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 or BOOL which must follow the same type of the specified symbol definition. In case the variable already is initialized, it overwrites the value. Supported registers: HOLDING_REGISTER , COIL , DISCRETE_INPUT , INPUT_REGISTER Toggle Toggle acts as a NOT inverting the logic of the COIL <toggle symbol=\"COIL_REGISTER\" /> Supported registers: COIL Add Add (as the name implies) add a certain value to a variable, like the example below: <add symbol=\"MOTOR_SPEED1\">15.5</add> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! Sub Sub (as the name implies) subtract a certain value of a variable, like the example below: <sub symbol=\"MOTOR_SPEED1\">1.12</sub> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! Mult Mult (as the name implies) multiplies a certain value of a variable, like the example below: <mult symbol=\"MOTOR_SPEED1\">1.12</mult> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! Div Div (as the name implies) divides a certain value of a variable, like the example below: <div symbol=\"MOTOR_SPEED1\">1.12</div> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! Random Random generates new random values each time it executes <random symbol=\"TEMPERATURE1\" valueMin=\"-50.0\" valueMax=\"10.0\"/> Both symbol and valueMin and valueMax are mandatory fields. Both values can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! Linear Generates new values following a linear equation (ax + b) <linear symbol=\"TEMPERATURE_MOTOR1\" a=\"3\" b=\"2\" startX=\"0\" endX=\"12\" replay=\"true\" step=\"1.5\"/> <linear symbol=\"TEMPERATURE_MOTOR2\" a=\"3\" b=\"2\" startX=\"12\" endX=\"0\" replay=\"true\" step=\"1.5\"/> Both symbol , startX , endX , a , b and step are mandatory fields. Both values can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. step must be a positive value of type INT16 or FLOAT32 On the first example (xml above) x is starting in 0 and going up until 12 (<=) with a step of 1.5 so the x values for the equation will be [0 1.5 3 4.5 6 7.5 9 10.5 12]. Second example is the oposite, note that startX is greater than endX, so the x values applied on this equation will be [12 10.5 9 7.5 6 4.5 3 1.5 0], also note that the step is positive, what is different is the startX and endX to indicate order. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! Csv Uses a CSV as data source based on the specified column. <csv symbol=\"TEMPERATURE_MOTOR3\" file=\"test_data.csv\" column=\"1\" replay=\"true\"/> <csv symbol=\"TEMPERATURE_MOTOR4\" file=\"test_data.csv\" column=\"2\" step=\"2\" startRow=\"2\" endRow=\"5\" replay=\"true\"/> Both symbol , file , column are mandatory fields. column must have the number of the column to be read, please notice that the values on the CSV must follow the same type of the specified symbol definition. step must be a positive value of type INT16 which is related to the row index Each time this operation is executed it will get the next row of the column specified and set to the specified symbol. Supported registers: HOLDING_REGISTER, INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported! If equal Used for comparison, every operation inside the ifequal body will be executed <ifEqual symbol=\"TEMPERATURE_MOTOR5\" value=\"-12.5\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifEqual> Both symbol and value are mandatory fields. Both can have an atomic value or a reference to a symbol (which can refer to a register or a parameter) Supported registers: HOLDING_REGISTER, INPUT_REGISTER, COIL and PARAMETER Example using a parameter as a value <ifEqual symbol=\"TEMPERATURE_MOTOR5\" value=\"PARAM_DEFINED_TEMPERATURE\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifEqual> Please note the symbol and value datatype needs to match. If greater Used for comparison, every operation inside the ifGreater body will be executed <ifGreater symbol=\"TEMPERATURE_MOTOR5\" value=\"-12.5\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifGreater> Both symbol and value are mandatory fields. Both can have an atomic value or a reference to a symbol (which can refer to a register or a parameter) Supported registers: HOLDING_REGISTER, INPUT_REGISTER, COIL and PARAMETER Example using a parameter as a value <ifGreater symbol=\"TEMPERATURE_MOTOR5\" value=\"PARAM_DEFINED_TEMPERATURE\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifGreater> Please note the symbol and value datatype needs to match. If less Used for comparison, every operation inside the ifLess body will be executed <ifLess symbol=\"TEMPERATURE_MOTOR5\" value=\"-12.5\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifLess> Both symbol and value are mandatory fields. Both can have an atomic value or a reference to a symbol (which can refer to a register or a parameter) Supported registers: HOLDING_REGISTER, INPUT_REGISTER, COIL and PARAMETER Example using a parameter as a value <ifLess symbol=\"TEMPERATURE_MOTOR5\" value=\"PARAM_DEFINED_TEMPERATURE\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifLess> Please note the symbol and value datatype needs to match. Trace Trace operation provides a tool for debugging, by printing (tracing) the current value of symbols Supported registers: HOLDING_REGISTER , COIL , DISCRETE_INPUT , INPUT_REGISTER <trace symbol=\"RPM_MOTOR\" />","title":"Operations"},{"location":"getting-started/operations/#operations","text":"This sections covers the different types of operations the simulator can perform when configured in advanced (custom) simulation.","title":"Operations"},{"location":"getting-started/operations/#set","text":"Set (as the name implies) set a certain value to a variable, like the example below: <set symbol=\"MOTOR_SPEED1\">100.5</set> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 or BOOL which must follow the same type of the specified symbol definition. In case the variable already is initialized, it overwrites the value. Supported registers: HOLDING_REGISTER , COIL , DISCRETE_INPUT , INPUT_REGISTER","title":"Set"},{"location":"getting-started/operations/#toggle","text":"Toggle acts as a NOT inverting the logic of the COIL <toggle symbol=\"COIL_REGISTER\" /> Supported registers: COIL","title":"Toggle"},{"location":"getting-started/operations/#add","text":"Add (as the name implies) add a certain value to a variable, like the example below: <add symbol=\"MOTOR_SPEED1\">15.5</add> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Add"},{"location":"getting-started/operations/#sub","text":"Sub (as the name implies) subtract a certain value of a variable, like the example below: <sub symbol=\"MOTOR_SPEED1\">1.12</sub> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Sub"},{"location":"getting-started/operations/#mult","text":"Mult (as the name implies) multiplies a certain value of a variable, like the example below: <mult symbol=\"MOTOR_SPEED1\">1.12</mult> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Mult"},{"location":"getting-started/operations/#div","text":"Div (as the name implies) divides a certain value of a variable, like the example below: <div symbol=\"MOTOR_SPEED1\">1.12</div> Both symbol and value are mandatory fields. value can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Div"},{"location":"getting-started/operations/#random","text":"Random generates new random values each time it executes <random symbol=\"TEMPERATURE1\" valueMin=\"-50.0\" valueMax=\"10.0\"/> Both symbol and valueMin and valueMax are mandatory fields. Both values can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Random"},{"location":"getting-started/operations/#linear","text":"Generates new values following a linear equation (ax + b) <linear symbol=\"TEMPERATURE_MOTOR1\" a=\"3\" b=\"2\" startX=\"0\" endX=\"12\" replay=\"true\" step=\"1.5\"/> <linear symbol=\"TEMPERATURE_MOTOR2\" a=\"3\" b=\"2\" startX=\"12\" endX=\"0\" replay=\"true\" step=\"1.5\"/> Both symbol , startX , endX , a , b and step are mandatory fields. Both values can be of type FLOAT32 , INT16 which must follow the same type of the specified symbol definition. step must be a positive value of type INT16 or FLOAT32 On the first example (xml above) x is starting in 0 and going up until 12 (<=) with a step of 1.5 so the x values for the equation will be [0 1.5 3 4.5 6 7.5 9 10.5 12]. Second example is the oposite, note that startX is greater than endX, so the x values applied on this equation will be [12 10.5 9 7.5 6 4.5 3 1.5 0], also note that the step is positive, what is different is the startX and endX to indicate order. Supported registers: HOLDING_REGISTER , INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Linear"},{"location":"getting-started/operations/#csv","text":"Uses a CSV as data source based on the specified column. <csv symbol=\"TEMPERATURE_MOTOR3\" file=\"test_data.csv\" column=\"1\" replay=\"true\"/> <csv symbol=\"TEMPERATURE_MOTOR4\" file=\"test_data.csv\" column=\"2\" step=\"2\" startRow=\"2\" endRow=\"5\" replay=\"true\"/> Both symbol , file , column are mandatory fields. column must have the number of the column to be read, please notice that the values on the CSV must follow the same type of the specified symbol definition. step must be a positive value of type INT16 which is related to the row index Each time this operation is executed it will get the next row of the column specified and set to the specified symbol. Supported registers: HOLDING_REGISTER, INPUT_REGISTER For INPUT_REGISTER type FLOAT32 is not supported!","title":"Csv"},{"location":"getting-started/operations/#if-equal","text":"Used for comparison, every operation inside the ifequal body will be executed <ifEqual symbol=\"TEMPERATURE_MOTOR5\" value=\"-12.5\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifEqual> Both symbol and value are mandatory fields. Both can have an atomic value or a reference to a symbol (which can refer to a register or a parameter) Supported registers: HOLDING_REGISTER, INPUT_REGISTER, COIL and PARAMETER Example using a parameter as a value <ifEqual symbol=\"TEMPERATURE_MOTOR5\" value=\"PARAM_DEFINED_TEMPERATURE\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifEqual> Please note the symbol and value datatype needs to match.","title":"If equal"},{"location":"getting-started/operations/#if-greater","text":"Used for comparison, every operation inside the ifGreater body will be executed <ifGreater symbol=\"TEMPERATURE_MOTOR5\" value=\"-12.5\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifGreater> Both symbol and value are mandatory fields. Both can have an atomic value or a reference to a symbol (which can refer to a register or a parameter) Supported registers: HOLDING_REGISTER, INPUT_REGISTER, COIL and PARAMETER Example using a parameter as a value <ifGreater symbol=\"TEMPERATURE_MOTOR5\" value=\"PARAM_DEFINED_TEMPERATURE\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifGreater> Please note the symbol and value datatype needs to match.","title":"If greater"},{"location":"getting-started/operations/#if-less","text":"Used for comparison, every operation inside the ifLess body will be executed <ifLess symbol=\"TEMPERATURE_MOTOR5\" value=\"-12.5\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifLess> Both symbol and value are mandatory fields. Both can have an atomic value or a reference to a symbol (which can refer to a register or a parameter) Supported registers: HOLDING_REGISTER, INPUT_REGISTER, COIL and PARAMETER Example using a parameter as a value <ifLess symbol=\"TEMPERATURE_MOTOR5\" value=\"PARAM_DEFINED_TEMPERATURE\"> <set symbol=\"MOTOR5_RPM\">0</set> </ifLess> Please note the symbol and value datatype needs to match.","title":"If less"},{"location":"getting-started/operations/#trace","text":"Trace operation provides a tool for debugging, by printing (tracing) the current value of symbols Supported registers: HOLDING_REGISTER , COIL , DISCRETE_INPUT , INPUT_REGISTER <trace symbol=\"RPM_MOTOR\" />","title":"Trace"},{"location":"getting-started/quick-start/","text":"Quick Start The most simple and quick way to run the modbus simulator is by using docker, in this example we will run the modbus simulator without simulation. Pull the Modbus Simulator docker pull paulorb/modbus-simulator-cli Run the Modbus Simulator docker run --rm -p 5002:5002 paulorb/modbus-simulator-cli This simulator offers many other types of simulation, predefined ones or custom (based on a configuration file) Predefined Simulations Random values By specifying -sr argument the simulator will generate random numbers for register values, each time a read operation is performed, write operations are ignored. Custom Simulation The simulation can be customized by providing a configuration (in XML format) to the simulator. This is an example of configuration: <?xml version=\"1.0\" encoding=\"US-ASCII\" ?> <device ip=\"0.0.0.0\" port=\"502\"> <configuration initializeUndefinedRegisters=\"true\" initialValue=\"0\"> <registers> <register addressType=\"HOLDING_REGISTER\" address=\"14\" symbol=\"RPM_MOTOR\">500</register> <register addressType=\"HOLDING_REGISTER\" address=\"10\" datatype=\"FLOAT32\" symbol=\"TEMPERATURE\">-12.5</register> <register addressType=\"HOLDING_REGISTER\" address=\"0\" datatype=\"INT16\" symbol=\"RPM_MOTOR1\">1</register> <register addressType=\"COIL\" address=\"1\" symbol=\"RELAYON\">1</register> <register addressType=\"DISCRETE_INPUT\" address=\"0\" symbol=\"RELAY_STATUS\">1</register> <register addressType=\"INPUT_REGISTER\" address=\"0\" symbol=\"RPM\">1</register> </registers> </configuration> <simulation plcScanTime=\"1000\"> <set symbol=\"TEMPERATURE\">2.0</set> <set symbol=\"RPM_MOTOR\">15</set> <delay>500</delay> <set symbol=\"RPM\">1</set> <delay>500</delay> <set symbol=\"RPM\">0</set> <delay>500</delay> <sub symbol=\"RPM_MOTOR\">10</sub> <delay>500</delay> <add symbol=\"RPM_MOTOR\">10</add> </simulation> </device> Sections device and configuration are mandatory Custom simulation with docker For the custom simulation to work, the configuration file must be defined. Place the configuration file in a folder for example simulation folder From inside the folder (cd simulation) execute the following command docker run -it -v $PWD/:/simulation -p5002:5002 paulorb/modbus-simulator-cli -f /simulation/simulation.xml Device section Device section is used to configure the network parameters of the driver TODO: define device section","title":"Quick start"},{"location":"getting-started/quick-start/#quick-start","text":"The most simple and quick way to run the modbus simulator is by using docker, in this example we will run the modbus simulator without simulation. Pull the Modbus Simulator docker pull paulorb/modbus-simulator-cli Run the Modbus Simulator docker run --rm -p 5002:5002 paulorb/modbus-simulator-cli This simulator offers many other types of simulation, predefined ones or custom (based on a configuration file)","title":"Quick Start"},{"location":"getting-started/quick-start/#predefined-simulations","text":"","title":"Predefined Simulations"},{"location":"getting-started/quick-start/#random-values","text":"By specifying -sr argument the simulator will generate random numbers for register values, each time a read operation is performed, write operations are ignored.","title":"Random values"},{"location":"getting-started/quick-start/#custom-simulation","text":"The simulation can be customized by providing a configuration (in XML format) to the simulator. This is an example of configuration: <?xml version=\"1.0\" encoding=\"US-ASCII\" ?> <device ip=\"0.0.0.0\" port=\"502\"> <configuration initializeUndefinedRegisters=\"true\" initialValue=\"0\"> <registers> <register addressType=\"HOLDING_REGISTER\" address=\"14\" symbol=\"RPM_MOTOR\">500</register> <register addressType=\"HOLDING_REGISTER\" address=\"10\" datatype=\"FLOAT32\" symbol=\"TEMPERATURE\">-12.5</register> <register addressType=\"HOLDING_REGISTER\" address=\"0\" datatype=\"INT16\" symbol=\"RPM_MOTOR1\">1</register> <register addressType=\"COIL\" address=\"1\" symbol=\"RELAYON\">1</register> <register addressType=\"DISCRETE_INPUT\" address=\"0\" symbol=\"RELAY_STATUS\">1</register> <register addressType=\"INPUT_REGISTER\" address=\"0\" symbol=\"RPM\">1</register> </registers> </configuration> <simulation plcScanTime=\"1000\"> <set symbol=\"TEMPERATURE\">2.0</set> <set symbol=\"RPM_MOTOR\">15</set> <delay>500</delay> <set symbol=\"RPM\">1</set> <delay>500</delay> <set symbol=\"RPM\">0</set> <delay>500</delay> <sub symbol=\"RPM_MOTOR\">10</sub> <delay>500</delay> <add symbol=\"RPM_MOTOR\">10</add> </simulation> </device> Sections device and configuration are mandatory","title":"Custom Simulation"},{"location":"getting-started/quick-start/#custom-simulation-with-docker","text":"For the custom simulation to work, the configuration file must be defined. Place the configuration file in a folder for example simulation folder From inside the folder (cd simulation) execute the following command docker run -it -v $PWD/:/simulation -p5002:5002 paulorb/modbus-simulator-cli -f /simulation/simulation.xml","title":"Custom simulation with docker"},{"location":"getting-started/quick-start/#device-section","text":"Device section is used to configure the network parameters of the driver TODO: define device section","title":"Device section"}]}